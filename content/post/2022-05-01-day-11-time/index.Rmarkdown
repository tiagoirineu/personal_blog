---
title: 'Day 11: Time'
author: Tiago Irineu
date: '2022-05-01'
slug: day-11-time
categories: []
tags: []
subtitle: ''
summary: ''
authors: []
lastmod: '2022-05-01T15:46:15-03:00'
featured: no
image:
  caption: ''
  focal_point: ''
  preview_only: no
projects: []
---
This lesson is about how to analyze time series in R.

### Example
```{r, setup, include=FALSE}

knitr::opts_chunk$set(
    message = FALSE, warning = FALSE
)
```



```{r, warning=FALSE, message=FALSE}
library(tidyverse)
library(tidyquant)   # Tidyquant R package for financial data manipulation
library(scales)
```
We will use the *tidyquant* package to access data from [FRED](https://fred.stlouisfed.org/).



```{r Getting the data, eval=FALSE}

fred_raw <- tq_get(c("RSXFSN", # Advance retail sales
                     "GDPC1", # GDP
                     "ICSA", #Initial Unemployment claims
                     "FPCPITOTLZGUSA", # Inflation
                     "UNRATE", # Unemployment Rate
                     "USREC"), # Recessions
                   get = "economic.data", # data source, FRED
                   from = "1990-01-01"
                     )
```


```{r, eval=FALSE, include=FALSE}
write_csv(fred_raw, "fred_raw.csv")

```

```{r Loading the downloaded data, include=FALSE}

fred_raw <- read_csv("fred_raw.csv")

```



Below, we make the data wider. 

```{r}
fred_monthly_things <-  fred_raw %>% 
    filter(symbol %in% c("UNRATE", 'RSXFSN')) %>% 
    # Get column names from the symbol column
    # respective values from the price column
    pivot_wider(names_from = symbol, values_from = price) %>% 
    rename(unemployment = UNRATE, retail_sales = RSXFSN)

fred_monthly_things


```

This was just a brief demonstration of what can be done with the package.

### Plotting time

Usually lines are used to represent time series.

```{r}

gdp_only <- fred_raw %>% 
    filter(symbol == "GDPC1")

ggplot(gdp_only, aes(x = date, y = price)) +
    geom_line()

```

**Unemployment Claims**

```{r}
fred_raw %>% 
    filter(symbol == "ICSA") %>% 
    ggplot(aes( x = date, y = price)) +
    geom_line()
```


#### Improving graphics

```{r}
ggplot(gdp_only , aes(x = date, y = price)) +
    geom_line(color = "#0074d9", size = 1.5) +
    scale_y_continuous(labels = dollar) + #Adds dollar signals in the number in the y x
    labs( y = "Billions of 2012 dollars",
          x = NULL,
          title = "US Gross Domestic Product",
          subtitle = "Quartely data; real 2012 dollars",
          caption = "Source: US Bureau of Economic Analysis and FRED") +
    theme_bw(base_family = "Roboto Condensed") +
    theme(plot.title = element_text(face = "bold"))
```

Now ,this is a simple and beautiful plot.

#### Adding an extra layer : Recessions

```{r}
recessions_tidy <- fred_raw %>% 
            filter(symbol == "USREC") %>% 
    mutate(recession_change = price - lag(price)) # If 1, it marks the start of a recession, if -1 it marks the end of a recession
recessions_tidy

```

```{r}
recessions_start_end <- fred_raw %>% 
    filter(symbol == 'USREC') %>% 
    mutate(recession_change = price - lag(price)) %>% 
    filter(recession_change != 0 )
recessions_start_end 
```

Now, we combine both datasets.


```{r}
recessions <- tibble(start = filter(recessions_start_end, recession_change == 1)$date,
                     end=filter(recessions_start_end, recession_change == -1)$date)
recessions
```

Now, we add the recession years as a shade in our plot. As the line must be over the rectangular, it must be added after.

```{r}
ggplot(gdp_only, aes(x = date, y = price)) +
    geom_rect(data = recessions,
              aes(xmin = start, xmax = end, ymin = -Inf, ymax = Inf),
              inherit.aes = FALSE, fill = "#B10DC9", alpha = 0.3)+
    geom_line(color = '#0074D9', size = 1) +
    scale_y_continuous(labels = dollar) +
    labs( y = "Billions of 2012 dollars",
          x = NULL,
          title = "US Gross Domestic Product",
          subtitle = "Quartely data; real 2012 dollars",
          caption = "Source: US Bureau of Economic Analysis and FRED") +
    theme_bw(base_family = "Roboto Condensed") +
    theme(plot.title = element_text(face = "bold"))

```

And that's it. A beautiful plot, ready for publication

### Decomposition

*A time series can be divided in three components: the trend, the seasonality, and a random aspect that it's not explained by either.* 

**Example 1**
```{r Preparing the dataset, warning=FALSE, message=FALSE}

library(tsibble) #For embedding time things into data frames

retail_sales <- fred_raw %>% 
    filter(symbol == "RSXFSN") %>% 
    mutate(year_month = yearmonth(date)) %>% 
    as_tsibble(index = year_month) # order it and treates like a time period
retail_sales

```

Now, we create a model for decomposing this time series. We will use the [STL decomposition](https://otexts.com/fpp2/stl.html)(**S**easonal and **T**rend decomposition **L**oess).
```{r, warning=FALSE, message=FALSE}
library(feasts) 

retail_model <- retail_sales %>% 
    model(stl = STL(price))
retail_model
```

We created an object. Now, we must extract the components from it.

```{r Extracting the components}

retail_components <- components(retail_model)
retail_components

```


Let's plot it, so we can have an idea about each component.

```{r}
autoplot(retail_components) +
    labs(x = NULL) +
    theme_bw(base_family = "Roboto Condensed") +
    theme(plot.title = element_text(face = "bold"))
```


It is interesting that we can the Covid impact in the remainder, but the recuperation was so fast that it did not impact the trend. Contrast this with the 2009 crisis, where actually see a change in the retail sales trend.

If we want, we can plot just a component. Below, we plot just the trend. So we can see more clearly the impact of the 2009 crisis and the pandemic.

```{r}
ggplot(retail_components, 
       aes(x = as_date(year_month), y = trend)) +
  geom_rect(data = recessions, 
            aes(xmin = start, xmax = end, ymin = -Inf, ymax = Inf),
            inherit.aes = FALSE, fill = "#B10DC9", alpha = 0.3) +
  geom_line() + 
  scale_y_continuous(labels = dollar) +
  labs(x = NULL, y = "Trend, millions of dollars",
       title = "Seasonally adjusted trends in retail sales",
       subtitle = "Nominal US dollars") +
  theme_bw(base_family = "Roboto Condensed") +
  theme(plot.title = element_text(face = "bold"))

```



#### A more detailed version

**First, let's create a tidy dataset**.

```{r}
retail_components_tidy <- retail_components %>% 
    #Get rid of this column %>% 
    select(-season_adjust) %>% 
    
    # Combine all components in a column called components
    
    pivot_longer(cols = c(price, trend, season_year, remainder),
                 names_to = "component", values_to = "value") %>% 
    
    # Recode this values so they're nicer
    mutate(component = recode(component,
                             price = "Actual data",
                             trend = "Trend",
                             season_year = "Seasonality",
                             remainder = "Remainder")) %>% 
    # Make the component categories follow the order they're in the data
    
    mutate( component = fct_inorder(component)) 

retail_components_tidy
    
     


```


Now, we can create the final plot:

```{r, warning=FALSE}
ggplot(retail_components_tidy, 
       aes(x = as_date(year_month), y = value)) +
  geom_rect(data = recessions, 
            aes(xmin = start, xmax = end, ymin = -Inf, ymax = Inf),
            inherit.aes = FALSE, fill = "#B10DC9", alpha = 0.3) +
  geom_line() + 
  scale_y_continuous(labels = dollar) +
  labs(x = NULL, y = "Millions of dollars",
       title = "Decomposed US Advance Retail Sales",
       subtitle = "Nominal US dollars",
       caption = "Source: US Census Bureau and FRED (RSXFSN)") +
  facet_wrap(vars(component), ncol = 1, scales = "free_y") +
  theme_minimal(base_family = "Roboto Condensed") +
  theme(plot.title = element_text(face = "bold"),
        plot.title.position = "plot",
        strip.text = element_text(face = "bold", hjust = 0))
```


### Exercises

For the exercise I will replicate the example but using the Exchange Rate between Brazilian Reais and USD Dollars.

```{r Loading the necessary packages}

library(tidyverse)
library(tidyquant)


```
```{r Reading the data, eval=FALSE}

brl_usd <- tq_get("DEXBZUS", get = "economic.data", from = "2000-01-02")
brl_usd 


```
```{r, eval=FALSE, echo=FALSE}
write.csv(brl_usd, "brl_usd.csv")
```

```{r, echo=FALSE}
brl_usd <- read.csv("brl_usd.csv")

# By some reason, when saved as a csv the date column became character. Therefore, a mutate call is necessary
brl_usd <- mutate( brl_usd, date = as.Date(date))
str(brl_usd)
```



```{r}
ggplot(brl_usd, aes( x = date, y = price)) + 
    geom_line(size = 0.75, color = "darkblue") +
    labs(x = NULL, y = "Reais per dollar",
         title = "BRL/USD Exchange rate") +
    theme_bw(base_family = "Roboto Condensed")
```

#### Decomposing the series

For this step, we first create a column with year and month.

```{r decomposing}
library(tsibble)

# There are no observation for the weekend. So I create artificial observations for the weekend, by repeating the last entry

fx <- brl_usd %>%
    as_tsibble(index = date) %>% 
    fill_gaps() %>% 
    tidyr::fill(price, .direction = "down")

head(fx)
```
```{r}
library(feasts)

fx_model <- fx %>% 
    model(stl = STL(price))
fx_components <- components(fx_model)
head(fx_components)

```
```{r}
autoplot(fx_components) +
    labs(x = NULL) +
    theme_bw(base_family = "Roboto Condensed") +
    theme(plot.title = element_text(face = "bold"))
```
At least for me, this was not as informative as the decomposition of retail sales discussed in the example.
As it is just an exercise, I will let it here in this way.

