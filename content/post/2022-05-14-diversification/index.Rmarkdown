---
title: Diversification
author: Tiago Irineu
date: '2022-05-14'
slug: Markowitiz
categories: []
tags: []
subtitle: ''
summary: ''
authors: []
lastmod: '2022-05-14T23:45:13-03:00'
featured: no
image:
  caption: ''
  focal_point: ''
  preview_only: no
projects: []
---
## Diversification


### Introduction

Abaixo, traduzo para o R um script em Python, compartilhado pelo professor Daniel Bergmann, no curso Fundamentos de métodos quantitativos aplicados a Risco, parte da especialização em Gestão de Risco pela Saint Paul e B3.

Você pode acessar o código inicial clicando [aqui](https://colab.research.google.com/drive/1IyTmX8v9SWo6QvsgEv6YmhUhpVeR6L_A#scrollTo=dKORsyf9JAvs).

É realizado um exercício de diversificação de carteira.

*Iremos acessar as informações reais de um conjunto de ações listada na bolsa, e calcular o log-retorno diário. 

*Simular 10.000 carteiras diferentes e no fim representar graficamente qual seria a carteira com maior sharpe, ou seja, com a melhor razão risco/retorno.

### Diversification

Primeiro, carregamos os dois pacotes que serão necessários. [Tidyverse](https://r4ds.had.co.nz/) para trabalhar com os dados e [tidyquant]() para baixar os dados financeiros e acessar algumas funções específicas para este tipo de dados.

```{r Loading necessary packages, message = FALSE, warning=FALSE}
library(tidyverse)
library(tidyquant)

```

Para baixar os dados de uma empresa, precisamos de utilizar o seu ticker, o código pelo qual ela é conhecida na bolsa. 
Abaixo, baixamos os dados e olhamos as primeiras do dataset.

```{r Downloading the data, eval=FALSE}

tickers <- c("ITUB3.SA", 'BBAS3.SA', "ABEV3.SA", "MGLU3.SA", "VIIA3.SA", "VALE3.SA", "PETR4.SA", "ABEV3.SA", "BBDC4.SA", "GGBR4.SA", "CSNA3.SA", "COGN3.SA")

data <-  tq_get( tickers, get = "stock.prices", from = "2019-04-29")  #Downloading the data from the above company

head(data)

```


```{r, echo=FALSE, message=FALSE}
tickers <- c("ITUB3.SA", 'BBAS3.SA', "ABEV3.SA", "MGLU3.SA", "VIIA3.SA", "VALE3.SA", "PETR4.SA", "BBDC4.SA", "GGBR4.SA", "CSNA3.SA", "COGN3.SA")
data <- read_csv("portfolio2.csv")

head(data)

```


Abaixo, visualizamos os dados. Como pode haver uma grande diferença entre os preçõs das diferentes ações, normalizamos todos para 100 no início do período. Desta forma, o que estamos vendo é a performance dos papéis a partir da data inicial.Isto permite ter uma visão da performance relativa de cada ação.

```{r, warning=FALSE, message=FALSE}
data %>% 
    group_by(symbol) %>% 
    mutate(norm_price = close/close[1]*100) %>% 
    ggplot(aes(date, norm_price)) +
    geom_line(aes(color = symbol), size = 0.8) +
    labs(y = "Preços normalizados", x = NULL) +

# Agora, irei aplicar algumas modificações estéticias. Apenas por gosto pessoal.
    theme_bw( base_family = "Roboto Condensed") +
 #   guides(color = FALSE) +
  #  geom_text(data = filter(data, date == last(date)),aes(label = symbol)) +
    theme(panel.grid =  element_blank(),
          axis.title.y = element_text(face = "bold")
    )

```

### Simulação de pesos para carteira de ativos

Nosso objetivo é simular diferentes pesos e chegar a uma carteira hipotética que minimiza o índice Sharpe. 

Para isto, iremos simular 10.000 carteiras diferentes, calcular retorno, volatilidade, e o indíce Sharpe para cada uma delas e por fim fazer um gráfico de pizza mostrando a carteira.


#### Calculando o log returns das ações

```{r Creating log returns}
# We create a grouped dataset, so every function is applied over each ticker (company)

log_returns <- data %>% 
    group_by(symbol) %>% 
    #Daily log returns for the close price
    tq_transmute(select = close, mutate_fun = dailyReturn, type = "log") %>% 
    ungroup()

str(log_returns)
```

Abaixo, calculamos os retornos médios das ações.

```{r}
mean_returns <- log_returns %>% 
    group_by(symbol) %>% 
    summarise(mean_return = mean(daily.returns))

mean_returns
```



Abaixo, é feito um pré-trabalho que é necessário para a simulação. 
Iniciamos vetores e matrizes que serão utilizados para "guardar" os resultados da simulação.


```{r}

set.seed(1)
nticks = length(tickers)
nsample = 10000
port_returns = c()
port_vol = c()
all_weights <- matrix(nrow=nsample, ncol = nticks)
exp_return <- rep(0, nsample)
exp_var <- rep(0, nsample)
exp_std <- rep(0, nsample)
sharpe <- matrix(0, nrow=10000, ncol=1)

```
 
```{r Creating the weights}


weights <- runif(nticks, min= 0, max = 1) #Seleciona nticks float points, de uma distribuição uniforme entre 0 e 1.

weights <- weights/sum(weights) # Normaliza os pesos de tal forma que some até 1. Para garantir que os pesos façam sentido.
#m1 <- matrix(weights, ncol = nticks)


```




```{r Calculating the covariance}
cov_returns <- log_returns %>% 
    pivot_wider(names_from = symbol, values_from = daily.returns) %>%
    select(-date) %>% 
    cov()

```



```{r construindo o for loop}
# Neste código, é calculado o índice de Sharpe, o retorno e o risco


for (i in 1:nsample) {
    
    # Create, aleatory weights and normalize then to sum to 1
    weights <- runif(nticks, min= 0,1)
    weights <- weights/sum(weights)
    
    all_weights[i,] <- weights
    
    # Multiply by 250 so the returns and volatility are annualized
    exp_return[i] <- sum(weights*mean_returns$mean_return)*250
    
    exp_var[i] = weights%*%((cov_returns*250)%*%weights)
    
    exp_std[i] = sqrt(exp_var[1]) #Standard deviation as the risk
    sharpe[i,] <- exp_return[i]/exp_std[i] #Return/risk
    
    # Return and volatility vectors
    
    port_returns <- append(port_returns, exp_return[i])
    port_vol <-  append(port_vol, exp_std[i])
    
}
```

### Defining the optimum portfolio as measured by the sharpe index



```{r}
all_weights <- as_tibble(all_weights) 
names(all_weights) <- tickers

```
```{r}
Sharpe <- as_tibble(sharpe)
names(Sharpe) <- "sharpe"
Sharpe
```
```{r}
df <- cbind(all_weights,Sharpe)

ordered_df <- df %>% 
    arrange(desc(sharpe))
```


```{r}
head(ordered_df)
```

Below, we show the weights that create the portfolio with the biggest sharpe ratio.

```{r}
optimum <- ordered_df[1,1: 11]*100
optimum
    
```



```{r}

df <- pivot_longer(optimum, cols = tickers, names_to = "company", values_to = "percentual") 

df %>% 
    ggplot(aes(x="", y = percentual, fill = company)) + 
    geom_bar(stat= "identity", color = "white") +
    coord_polar("y", start = 0) +
    theme_void()
```

























